<?xml version="1.0" encoding="UTF-8"?><dictionary case_sensitive="false">
<entry count="54">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorSystem,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Address,Parse</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,ReceiveAny</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Shutdown</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.IStash,Unstash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.Address,Parse</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
</entry>
<entry count="32">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
</entry>
<entry count="4">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
</entry>
<entry count="1">
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="32">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="5">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="2">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Cancelable,new</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="2">
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Stop</token>
<token>Akka.Actor.IActorContext,Stop</token>
</entry>
<entry count="6">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="12">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Cancelable,new</token>
<token>Akka.Actor.ITellScheduler,ScheduleTellRepeatedly</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorSystem,ActorSelection</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Address,Parse</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="2">
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="2">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Cancelable,new</token>
</entry>
<entry count="2">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICanTell,Tell</token>
</entry>
<entry count="9">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Identify,new</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICancelable,Cancel</token>
</entry>
<entry count="12">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="12">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ICancelable,Cancel</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="4">
<token>Akka.Actor.Cancelable,new</token>
<token>Akka.Actor.ITellScheduler,ScheduleTellRepeatedly</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="2">
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
</entry>
<entry count="4">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,ReceiveAny</token>
</entry>
<entry count="6">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="17">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Cancelable,new</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Cancelable,new</token>
<token>Akka.Actor.ITellScheduler,ScheduleTellRepeatedly</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="5">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
</entry>
<entry count="2">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICanTell,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Cancelable,new</token>
</entry>
<entry count="1">
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="6">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Cancelable,new</token>
<token>Akka.Actor.ITellScheduler,ScheduleTellRepeatedly</token>
</entry>
<entry count="4">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
</entry>
<entry count="3">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="32">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="3">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="6">
<token>Akka.Actor.ICanTell,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="3">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="32">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="4">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
</entry>
<entry count="4">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorSystem,AwaitTermination</token>
</entry>
<entry count="5">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="7">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="3">
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
</entry>
<entry count="1">
<token>Akka.Actor.ICanWatch,Watch</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="32">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorSystem,AwaitTermination</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="8">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Stop</token>
<token>Akka.Actor.IActorContext,Stop</token>
<token>Akka.Actor.ActorBase,PreRestart</token>
</entry>
<entry count="6">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="7">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="2">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
</entry>
<entry count="66">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="2">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="10">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="2">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICanTell,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="2">
<token>Akka.Actor.ICanTell,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="40">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="9">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
</entry>
<entry count="1">
<token>Akka.Actor.SchedulerExtensions,ScheduleTellRepeatedlyCancelable</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="4">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Address,Parse</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICancelable,Cancel</token>
</entry>
<entry count="32">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Cancelable,new</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="2">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ActorBase,Unhandled</token>
</entry>
<entry count="6">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
</entry>
<entry count="1">
<token>Akka.Actor.SchedulerExtensions,ScheduleTellRepeatedlyCancelable</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="119">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="6">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ActorBase,Unhandled</token>
</entry>
<entry count="7">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,ReceiveAny</token>
</entry>
<entry count="4">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="2">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
</entry>
<entry count="7">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Cancelable,new</token>
</entry>
<entry count="6">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="2">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="9">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,ReceiveAny</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="9">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
</entry>
<entry count="2">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Cancelable,new</token>
<token>Akka.Actor.ITellScheduler,ScheduleTellRepeatedly</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Shutdown</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
</entry>
<entry count="32">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="3">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="4">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="4">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="3">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ICanWatch,Watch</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICancelable,Cancel</token>
</entry>
<entry count="1">
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Cancelable,new</token>
</entry>
<entry count="2">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Stop</token>
<token>Akka.Actor.ActorBase,PreRestart</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorSystem,AwaitTermination</token>
</entry>
<entry count="2">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="4">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="10">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ICancelable,Cancel</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="1">
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="7">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,ReceiveAny</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
</entry>
<entry count="1">
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="198">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Address,Parse</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="2">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="42">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
</entry>
<entry count="2">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="9">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Cancelable,new</token>
<token>Akka.Actor.ITellScheduler,ScheduleTellRepeatedly</token>
</entry>
<entry count="28">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Identify,new</token>
</entry>
<entry count="4">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Address,Parse</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="2">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICanTell,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorSystem,ActorSelection</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="2">
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ActorBase,PreRestart</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="5">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="32">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="4">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="2">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="19">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorSystem,AwaitTermination</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Identify,new</token>
<token>Akka.Actor.Futures,Ask</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
</entry>
<entry count="2">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorSystem,ActorSelection</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="4">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.SchedulerExtensions,ScheduleTellRepeatedlyCancelable</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="7">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="15">
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
</entry>
<entry count="76">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="12">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="2">
<token>Akka.Actor.ICanTell,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="6">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Cancelable,new</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ActorBase,Unhandled</token>
</entry>
<entry count="5">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICancelable,Cancel</token>
</entry>
<entry count="2">
<token>Akka.Actor.Identify,new</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.PipeToSupport,PipeTo</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="2">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Cancelable,new</token>
<token>Akka.Actor.ITellScheduler,ScheduleTellRepeatedly</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorSystem,ActorSelection</token>
</entry>
<entry count="1">
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="2">
<token>Akka.Actor.Identify,new</token>
<token>Akka.Actor.Futures,Ask</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Cancelable,new</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Cancelable,new</token>
<token>Akka.Actor.ITellScheduler,ScheduleTellRepeatedly</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
</entry>
<entry count="32">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="6">
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ICanWatch,Watch</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.Futures,Ask</token>
</entry>
<entry count="24">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="2">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
</entry>
<entry count="13">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorSystem,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Address,Parse</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.SchedulerExtensions,ScheduleTellRepeatedlyCancelable</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ICancelable,Cancel</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="2">
<token>Akka.Actor.ActorSystem,Create</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="5">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="5">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,ReceiveAny</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.ICanWatch,Watch</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="9">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="9">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
</entry>
<entry count="16">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="3">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="5">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
</entry>
<entry count="4">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.IActorContext,Child</token>
</entry>
<entry count="4">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="19">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="4">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,ReceiveAny</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="2">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
</entry>
<entry count="1">
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ActorBase,Unhandled</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.Deploy,WithScope</token>
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="4">
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,WithRouter</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
</entry>
<entry count="9">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="6">
<token>Akka.Actor.ICanTell,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ICancelable,Cancel</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithDeploy</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.Address,Parse</token>
<token>Akka.Actor.Props,Create</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.ActorSystem,ActorOf</token>
<token>Akka.Actor.ActorSystem,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
</entry>
<entry count="1">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
</entry>
<entry count="1">
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="32">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="2">
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
<token>Akka.Actor.IActorContext,Child</token>
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.Props,WithRouter</token>
<token>Akka.Actor.IActorRefFactory,ActorOf</token>
</entry>
<entry count="1">
<token>Akka.Actor.Props,Create</token>
<token>Akka.Actor.RemoteScope,new</token>
<token>Akka.Actor.Deploy,WithScope</token>
</entry>
<entry count="32">
<token>Akka.Actor.PipeToSupport,PipeTo</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.IStash,Stash</token>
<token>Akka.Actor.ReceiveActor,Become</token>
</entry>
<entry count="2">
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
<token>Akka.Actor.ActorSelection,Tell</token>
<token>Akka.Actor.IActorRefFactory,ActorSelection</token>
</entry>
<entry count="8">
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
<entry count="1">
<token>Akka.Actor.Futures,Ask</token>
<token>Akka.Actor.ActorRefImplicitSenderExtensions,Tell</token>
<token>Akka.Actor.IActorContext,SetReceiveTimeout</token>
</entry>
<entry count="2">
<token>Akka.Actor.ReceiveActor,Become</token>
<token>Akka.Actor.IStash,UnstashAll</token>
<token>Akka.Actor.ReceiveActor,Receive</token>
</entry>
</dictionary>
