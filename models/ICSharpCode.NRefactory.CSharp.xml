<?xml version="1.0" encoding="UTF-8"?><dictionary case_sensitive="false">
<entry count="37056">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseStatements</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="385">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.UncheckedExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="216">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AnonymousMethodExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="96">
<token>ICSharpCode.NRefactory.CSharp.EventDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
</entry>
<entry count="192">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="72">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="14">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,new</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseExpression</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ConditionalExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ConditionalExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ConditionalExpression,new</token>
</entry>
<entry count="720">
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="23040">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitBlockStatement</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AnonymousMethodExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="148">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IndexerDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitMemberReferenceExpression</token>
<token>ICSharpCode.NRefactory.CSharp.PointerReferenceExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
</entry>
<entry count="361">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
</entry>
<entry count="1024">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.TypeDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="336">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="192">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
</entry>
<entry count="1024">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
</entry>
<entry count="33">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AnonymousMethodExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitQueryFromClause</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.EventDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="33">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="216">
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="1024">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetParent</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.EventDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="7">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.UnaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.GotoStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="108">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.InsertParenthesesVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="15">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
</entry>
<entry count="120">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1024">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateAllman</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetText</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseExpression</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateAllman</token>
</entry>
<entry count="288">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="640">
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="96">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="96">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="640">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.CheckedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="640">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddChild</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitCastExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="192">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="46081">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Attribute,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitQueryContinuationClause</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitCastExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="108">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,new</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="37056">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,new</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseStatements</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.Comment,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseExpression</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="96">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.EventDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="46080">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
</entry>
<entry count="66">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="11">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetParent</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetParent</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitQueryFromClause</token>
</entry>
<entry count="72">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="504">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="710">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="324">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
</entry>
<entry count="324">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.UncheckedStatement,new</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AnonymousMethodExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.CheckedStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitQueryFromClause</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateAllman</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetText</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.Attribute,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.UnaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
</entry>
<entry count="14">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetParent</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.TypeDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="37056">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,new</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseStatements</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="46080">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="14">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="192">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
</entry>
<entry count="96">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
</entry>
<entry count="193">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.Attribute,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
</entry>
<entry count="9">
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UncheckedStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="192">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="22">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="640">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,new</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="1080">
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="81">
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="14">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="384">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.Comment,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="72">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="25088">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,new</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseExpression</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="23040">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitBlockStatement</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="7">
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="20">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.UnaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="361">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="504">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="44">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,new</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseExpression</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateAllman</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetParent</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetParent</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="9216">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="37056">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseStatements</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="216">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.UnaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.InsertParenthesesVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IndexerDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.FieldDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddChild</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="133">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.CheckedStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
</entry>
<entry count="22">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="11">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.UnaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="72">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AnonymousMethodExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.CheckedStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="22">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="13">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="192">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="84">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="14">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="90">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1592">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="22">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="14">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="46112">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.TypeDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="720">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="720">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="144">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitMemberReferenceExpression</token>
<token>ICSharpCode.NRefactory.CSharp.PointerReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="108">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="36">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="34">
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="42">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="37056">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseStatements</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IsExpression,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="22">
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.UncheckedStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="11">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DestructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="46083">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.EventDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitCastExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Member</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="26">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TextWriterTokenWriter,new</token>
<token>ICSharpCode.NRefactory.CSharp.TextWriterTokenWriter,WritePrimitiveValue</token>
</entry>
<entry count="362">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitQueryFromClause</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.TypeDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.GotoStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="720">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="104">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateAllman</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.InsertParenthesesVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="25088">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="37056">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="46080">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="192">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="721">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="36">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Comment,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildBefore</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,AcceptVisitor</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="336">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="42">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="42">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="640">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="44">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitCastExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
</entry>
<entry count="23040">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PointerReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.EventDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="640">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.GotoStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.Comment,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitQueryFromClause</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.CheckedStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="168">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
</entry>
<entry count="72">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="74112">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.TypeDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="929">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="11">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="108">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="504">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="62">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.Comment,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PointerReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="504">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="216">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="384">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="50">
<token>ICSharpCode.NRefactory.CSharp.TypeDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="27648">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitBlockStatement</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="20">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.TypeDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="96">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="96">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UndocumentedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="42">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildBefore</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="14">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.EventDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="903">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="252">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="44">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="120">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="252">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="37056">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,new</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseStatements</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="23040">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitBlockStatement</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,new</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="168">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1024">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UncheckedStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitMemberReferenceExpression</token>
<token>ICSharpCode.NRefactory.CSharp.PointerReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1024">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Comment,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.FieldDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1088">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="56">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="34">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,new</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="34">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="384">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="13">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.Attribute,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="721">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AnonymousMethodExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="324">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="23040">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitBlockStatement</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Attribute,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UnaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="290">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="37056">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseStatements</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
</entry>
<entry count="54">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildBefore</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.GotoStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="27840">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="63">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="50">
<token>ICSharpCode.NRefactory.CSharp.TypeDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.UncheckedStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="246">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.UnaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="46080">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="60">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="11">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="22">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="720">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="42">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="41">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="9216">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="37056">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,new</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseStatements</token>
</entry>
<entry count="7">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.TypeDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="50">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="642">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="324">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="27">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,AcceptVisitor</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,new</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseExpression</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateAllman</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetText</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="9216">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitAssignmentExpression</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="41">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
</entry>
<entry count="23">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="11">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="41">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="734">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="42">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ConstructorInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AnonymousMethodExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="108">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="86">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="288">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="22">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="23040">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="7">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="46080">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="55296">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitBlockStatement</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.Comment,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
</entry>
<entry count="20">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.EventDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.CSharpParser,ParseExpression</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateAllman</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetText</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="9">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="108">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="74">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="884">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.Attribute,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="23040">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BaseReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.FormattingOptionsFactory,CreateSharpDevelop</token>
<token>ICSharpCode.NRefactory.CSharp.CSharpOutputVisitor,new</token>
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="720">
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,new</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.Comment,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="1024">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="144">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="9216">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.UnaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitCastExpression</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="22">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.UnaryOperatorExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetChildrenByRole</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetChildrenByRole</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="18">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="320">
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="192">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="36">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildBefore</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DestructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="361">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="25088">
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="23040">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitBlockStatement</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="216">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="46080">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetParent</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetParent</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetPrevNode</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="32">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="34">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="111168">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="48">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="44">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="96">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="640">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitUnaryOperatorExpression</token>
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.ParameterDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="72">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="216">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.GotoStatement,new</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="30">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="148232">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitSimpleType</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddChild</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="80">
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.FieldDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArraySpecifier,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.CheckedStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.AstNode,GetParent</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="90">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildBefore</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1101">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ConstructorDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
</entry>
<entry count="96">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,Indexer</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="19">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
</entry>
<entry count="6">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="640">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitAssignmentExpression</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="512">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="9">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,LastOrNullObject</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AnonymousTypeCreateExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="20">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="128">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.OperatorDeclaration,GetOperatorType</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="64">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.ForStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitLambdaExpression</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.NamespaceDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SyntaxTree,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AsExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="576">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="54">
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="28">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.WhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="193">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MethodDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.Comment,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstType,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.WindowsNewLine,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="5">
<token>ICSharpCode.NRefactory.CSharp.ConditionalExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ConditionalExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor,VisitInvocationExpression</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="10">
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.ConstructorInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="16">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AddAnnotation</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ExpressionStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="160">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertBefore</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,FirstOrNullObject</token>
</entry>
<entry count="256">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Clear</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.NamedExpression,new</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.DirectionExpression,new</token>
</entry>
<entry count="720">
<token>ICSharpCode.NRefactory.CSharp.CaseLabel,new</token>
<token>ICSharpCode.NRefactory.CSharp.NullReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
</entry>
<entry count="46080">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="3">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ObjectCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.TryCatchStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,ReplaceWith</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="216">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.SwitchSection,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,CastTo</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.Expression,CastAs</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.IfElseStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BinaryOperatorExpression,new</token>
</entry>
<entry count="24">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.InvocationExpression,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
<entry count="12">
<token>ICSharpCode.NRefactory.CSharp.QueryFromClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.QuerySelectClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.QueryExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.ParenthesizedExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.DoWhileStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpressionBackreference,new</token>
<token>ICSharpCode.NRefactory.CSharp.AssignmentExpression,new</token>
</entry>
<entry count="360">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
<token>ICSharpCode.NRefactory.CSharp.BreakStatement,new</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,AcceptVisitor</token>
<token>ICSharpCode.NRefactory.CSharp.ThisReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberReferenceExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.LambdaExpression,new</token>
</entry>
<entry count="8">
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.VariableDeclarationStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.VariableInitializer,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Invoke</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.MemberType,new</token>
<token>ICSharpCode.NRefactory.CSharp.UsingDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,InsertChildAfter</token>
<token>ICSharpCode.NRefactory.CSharp.AstNode,AcceptVisitor</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.QueryWhereClause,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,InsertAfter</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.IdentifierExpression,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.PrimitiveExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.TypeOfExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Member</token>
<token>ICSharpCode.NRefactory.CSharp.AstType,Invoke</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.UsingStatement,new</token>
</entry>
<entry count="1">
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.PropertyDeclaration,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
<token>ICSharpCode.NRefactory.CSharp.Accessor,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="784">
<token>ICSharpCode.NRefactory.CSharp.AstNode,Remove</token>
<token>ICSharpCode.NRefactory.CSharp.QueryLetClause,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.AstType,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.SimpleType,new</token>
<token>ICSharpCode.NRefactory.CSharp.Expression,Clone</token>
<token>ICSharpCode.NRefactory.CSharp.CastExpression,new</token>
</entry>
<entry count="40">
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.ReturnStatement,new</token>
<token>ICSharpCode.NRefactory.CSharp.BlockStatement,Add</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,Add</token>
</entry>
<entry count="4">
<token>ICSharpCode.NRefactory.CSharp.IndexerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.PrimitiveType,new</token>
<token>ICSharpCode.NRefactory.CSharp.TypeReferenceExpression,new</token>
</entry>
<entry count="2">
<token>ICSharpCode.NRefactory.CSharp.ArrayCreateExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,MoveTo</token>
<token>ICSharpCode.NRefactory.CSharp.ArrayInitializerExpression,new</token>
<token>ICSharpCode.NRefactory.CSharp.AstNodeCollection,AddRange</token>
</entry>
</dictionary>
