<?xml version="1.0" encoding="UTF-8"?><dictionary case_sensitive="false">
<entry count="16483">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,GetStandaloneExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAnyUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="2685">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
</entry>
<entry count="40">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="14">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,FindToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,new</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetQueryClauseInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetQueryClauseInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4416">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="28">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="1296">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseSyntaxTree</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndRegionDirectiveTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Trivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="290">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="46">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TypeArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,GenericName</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="6672">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="1824">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="16467">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="7104">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="80">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EnumMemberDeclaration</token>
</entry>
<entry count="17">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="1920">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,Visit</token>
</entry>
<entry count="5184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AnonymousMethodExpression</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="2688">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseLeadingTrivia</token>
</entry>
<entry count="13704">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="5184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AnonymousMethodExpression</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
</entry>
<entry count="31920">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAliasQualifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="75">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InitializerExpression</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="69120">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
</entry>
<entry count="3072">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="2184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetQueryClauseInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="38">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitLocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DelegateDeclaration</token>
</entry>
<entry count="1296">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="580">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,new</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,WithPreprocessorSymbols</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,WithLanguageVersion</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="42">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventFieldDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingDirective</token>
</entry>
<entry count="26">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitGenericName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="13824">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="2736">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAliasQualifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="480">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetConversion</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,AnalyzeDataFlow</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
</entry>
<entry count="43431">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="128">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndOfLine</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="1552">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="342">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,GetRoot</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="55296">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="18009">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="34656">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAliasQualifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,new</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,new</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
</entry>
<entry count="4704">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="1280">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="38816">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="1344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,AnalyzeDataFlow</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1056">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="22">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="2184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,Visit</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitLocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndOfLine</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="2640">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetConversion</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="32">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="2184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAnyUnaryExpression</token>
</entry>
<entry count="1152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SyntaxTrivia</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,FindToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArrayCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberBindingExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="39">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="736">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="2604">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="77435">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="864">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NamespaceDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="25">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="1152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="16486">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="43776">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseSyntaxTree</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndRegionDirectiveTrivia</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AnonymousMethodExpression</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="702">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="10808">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="69120">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="293">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="608">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="51081">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="4006">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,AnalyzeControlFlow</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
</entry>
<entry count="778">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="42">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="512">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="864">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="2595">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="76">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitLocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4606">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3244">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
</entry>
<entry count="1344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="18232">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="25440">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseStatement</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToFullString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArrayCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="1728">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="1296">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="816">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetConversion</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="6528">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="5">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="864">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,ParseText</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EnumMemberDeclaration</token>
</entry>
<entry count="128">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="240">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndRegionDirectiveTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Trivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DoStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="388">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4608">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="776">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="12306">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="7392">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="19395">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="816">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetConversion</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="32">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="19">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="96000">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
</entry>
<entry count="240">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberBindingExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="4004">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="1344">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="5">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="19">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="5">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseSyntaxTree</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndRegionDirectiveTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Trivia</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="5184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3244">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="3552">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="69136">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="720">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="1156">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="12675">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeArgument</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="15424">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsPreprocessorDirective</token>
</entry>
<entry count="603">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="1939962">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NamespaceDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker,DefaultVisit</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="1296">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DelegateDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="5292">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="19">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitClassDeclaration</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="16467">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndRegionDirectiveTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Trivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NamespaceDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="38400">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="120">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="2098">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="400">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="16483">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,TryGetSpeculativeSemanticModel</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberBindingExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="16467">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="198">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="39">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="5472">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="7104">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="128">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="4608">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="13064">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
</entry>
<entry count="32">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="3966">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitNamespaceDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
</entry>
<entry count="480">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="84">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="350">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="5766">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="16583">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingDirective</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
</entry>
<entry count="2736">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1296">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="16487">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AwaitExpression</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="603">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
</entry>
<entry count="34">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberBindingExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="51072">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="5008">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitPrefixUnaryExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="7392">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="24685">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="3253">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="408">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="16484">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
</entry>
<entry count="1564">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="4608">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="7392">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InitializerExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="343">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="32">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="7">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="480">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="34656">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAliasQualifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
</entry>
<entry count="8291">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="252">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="7404">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="198">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,ParseText</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingDirective</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingDirective</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="5">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="4647">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,TryGetSpeculativeSemanticModel</token>
</entry>
<entry count="729">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="1344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="16487">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="5184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="49152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SyntaxTrivia</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="55296">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AreEquivalent</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="69120">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="120">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2688">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="240">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="702">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArrayCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArrayCreationExpression</token>
</entry>
<entry count="2688">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
</entry>
<entry count="66">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitIdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedLambdaExpression</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="39">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="198">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,TryGetSpeculativeSemanticModel</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetMemberGroup</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6272">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="16857">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Comment</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndOfLine</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="3552">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitLocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitBinaryExpression</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="4084">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="19">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,AnalyzeDataFlow</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="730">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="84">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndOfLine</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForEachStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
</entry>
<entry count="31920">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="2736">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="864">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="19">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="3552">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="7104">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="577">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="1536">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="114">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="7392">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NamespaceDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="69120">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="32">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="240">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="512">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="13">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="1536">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="49">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="80">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeArgument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="13062">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="14976">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="9591">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,FindToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="315">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="1824">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="816">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetConversion</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="87">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="5376">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseAttributeArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetSemanticModel</token>
</entry>
<entry count="4004">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="2184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="59918">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="1536">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="3244">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="56">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventFieldDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="4138">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="343">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="14">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingDirective</token>
</entry>
<entry count="1824">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="159">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="240">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="16467">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="13059">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4004">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="3552">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="1152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="11672">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="28986">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="720">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="246">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="1296">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="290">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="912">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="888">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetQueryClauseInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetQueryClauseInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="36480">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="7104">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,AnalyzeDataFlow</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="912">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseAttributeArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeList</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="256">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="5">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeList</token>
</entry>
<entry count="720">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="588">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="7776">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AnonymousMethodExpression</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="360">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingDirective</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
</entry>
<entry count="22">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="80">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="2688">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="152">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="63">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="11676">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3469">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1156">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="11676">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IndexerDeclaration</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2736">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAliasQualifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,AnalyzeDataFlow</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AreEquivalent</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SyntaxTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AwaitExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="56">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="864">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="34799">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="7392">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseSyntaxTree</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetSemanticModel</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="17504">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
</entry>
<entry count="11">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="84">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="243">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitMemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="736">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
</entry>
<entry count="4704">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,FindTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="1347">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="6272">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
</entry>
<entry count="44192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventFieldDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="44">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="7392">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="40">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseAttributeArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeList</token>
</entry>
<entry count="5408">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4004">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="13059">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="16483">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitNamespaceDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="32">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="9216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
</entry>
<entry count="7">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4560">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="159">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitNamespaceDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TypeArgumentList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseAttributeArgumentList</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2915">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,GetStandaloneExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
</entry>
<entry count="84">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="5">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker,VisitTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="271">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ClassDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="6272">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="16888">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="4704">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAssignmentExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="32">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="3552">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsPreprocessorKeyword</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="633">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="43776">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitBinaryExpression</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="38820">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InitializerExpression</token>
</entry>
<entry count="1172">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
</entry>
<entry count="69">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InitializerExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventDeclaration</token>
</entry>
<entry count="31920">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAliasQualifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="108">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="293">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="2917">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="1792">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="2184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="7392">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArrowExpressionClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="13824">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="49152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SyntaxTrivia</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArrayCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArrayCreationExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="9242">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="1824">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="4608">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="5376">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="6339">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="80">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,TryGetSpeculativeSemanticModel</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="1824">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="96000">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberBindingExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="42284">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedLambdaExpression</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="5142">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="864">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseAttributeArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="1152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="49">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,ParseText</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,new</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetDiagnostics</token>
</entry>
<entry count="4704">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="69120">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
</entry>
<entry count="4608">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="1392">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="121">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArrayCreationExpression</token>
</entry>
<entry count="512">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="16467">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
</entry>
<entry count="42">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,AddReferences</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,AddReferences</token>
</entry>
<entry count="778">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="792">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetDiagnostics</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedLambdaExpression</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="1824">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="290">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NamespaceDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
</entry>
<entry count="436">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="1824">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="26">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitIdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitNameMemberCref</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="16467">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,FindToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,ParseText</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,new</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AwaitExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsTypeDeclaration</token>
</entry>
<entry count="22">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="84">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="1024">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InitializerExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AnonymousMethodExpression</token>
</entry>
<entry count="32">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetDiagnostics</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetSemanticModel</token>
</entry>
<entry count="16486">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseAttributeArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="28">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeArgument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="17508">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
</entry>
<entry count="4608">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="84">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventDeclaration</token>
</entry>
<entry count="43776">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="400">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,ParseText</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,Visit</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="32">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="1152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="512">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitCompilationUnit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
</entry>
<entry count="13296">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="26">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="1152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="128">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndOfLine</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="5120">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="240">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="480">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseSyntaxTree</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndOfLine</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="1347">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,ParseText</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,new</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeArgument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeArgument</token>
</entry>
<entry count="4000">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="792">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="89">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="2184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NameEquals</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,Visit</token>
</entry>
<entry count="128">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NullableType</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="1318">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="1536">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Trivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="6124">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetDiagnostics</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetSemanticModel</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="3552">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="5376">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventFieldDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="480">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetConversion</token>
</entry>
<entry count="25">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="864">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="55296">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="8389">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CatchDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="360">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForEachStatement</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AnonymousMethodExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitLocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="152">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="152">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="2184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="9792">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="198">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1296">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2520">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="240">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="3152291">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4704">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="796">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="342">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="729">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="290">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="608">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NameColon</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="5">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitAssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="864">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitMemberAccessExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeList</token>
</entry>
<entry count="51146">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="363">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="32710">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="1152">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2517674">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArrayCreationExpression</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="3264">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetMemberGroup</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeList</token>
</entry>
<entry count="5184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberBindingExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="21">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="55296">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="75">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="290">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsIdentifierStartCharacter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsIdentifierPartCharacter</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsPreprocessorKeyword</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="15424">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="19395">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="7396">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="864">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="7392">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AwaitExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,AddReferences</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitAssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="3469">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Comment</token>
</entry>
<entry count="16467">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="14">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NamespaceDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="43776">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="528">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
</entry>
<entry count="4512">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="63">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="43776">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseAttributeArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="480">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="13296">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3168">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="12288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="39">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
</entry>
<entry count="43776">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2604">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="1728">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="80">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="7104">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="26">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="1296">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="12692">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAssignmentExpressionOperatorToken</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
</entry>
<entry count="55296">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="1466117">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForEachStatement</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InitializerExpression</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="90">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitIndexerDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="5188">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="4004">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,ParseText</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitStructDeclaration</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="7165">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="408">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DelegateDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="240">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="193">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="31920">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="26118">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="19">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="25346">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="42117">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="128">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IndexerDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ClassDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="5120">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NameColon</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeArgument</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="13">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="5184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberBindingExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitMemberAccessExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="63">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="5">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitMemberAccessExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="720">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="512">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ClassDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
</entry>
<entry count="290">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="4704">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="55296">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="240">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToFullString</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="7">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,AddReferences</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,AddReferences</token>
</entry>
<entry count="84">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="5376">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="19">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="400">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,GetKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,GetContextualKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsQueryContextualKeyword</token>
</entry>
<entry count="21180">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CatchDeclaration</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAnyUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
</entry>
<entry count="1920">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseLeadingTrivia</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="512">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitMethodDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="38016">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,new</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetDiagnostics</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsPreprocessorKeyword</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,new</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,WithPreprocessorSymbols</token>
</entry>
<entry count="4614">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="1280">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="512">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="633">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="1982">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="26">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,AnalyzeDataFlow</token>
</entry>
<entry count="816">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="1299">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="395">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Comment</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EndOfLine</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DelegateDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventFieldDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IndexerDeclaration</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="3240">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="159">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="16888">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IndexerDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="218">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAnyUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAssignmentExpressionOperatorToken</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NameColon</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeArgument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="291">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="98">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="13275">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="56">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,new</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetDiagnostics</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetSemanticModel</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitAccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="14112">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="49152">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CatchDeclaration</token>
</entry>
<entry count="432">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="25344">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="396">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SyntaxTrivia</token>
</entry>
<entry count="7074">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="5184">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AnonymousMethodExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ClassDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="720">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="13059">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NameColon</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitLocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InitializerExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="2736">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="6336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
</entry>
<entry count="580">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="7056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="295">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="416">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker,VisitToken</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="3696">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="5760">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="3264">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PostfixUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3641">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitCompilationUnit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="702">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,WhileStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="720">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="1280">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PrefixUnaryExpression</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="21">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="34656">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,GetKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,GetContextualKeywordKind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="7392">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="512">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitLocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PropertyDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="960">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1299">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="5">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IndexerDeclaration</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,ParseText</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions,new</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetDiagnostics</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,GetSemanticModel</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="14">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="28">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetQueryClauseInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EnumMemberDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="28">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="14">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitInvocationExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LetClause</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="19008">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleBaseType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="17012">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1264">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="292">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="4704">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InitializerExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EmptyStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetQueryClauseInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetQueryClauseInfo</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter,VisitCompilationUnit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="256">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedLambdaExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EventFieldDeclaration</token>
</entry>
<entry count="36">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="21">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="1440">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetFirstToken</token>
</entry>
<entry count="16854">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsContextualKeyword</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AttributeList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeTypeInfo</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TypeArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,GenericName</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetCompilationUnitRoot</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Whitespace</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="16">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,GetContextualKeywordKind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsQueryContextualKeyword</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SimpleLambdaExpression</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CheckedStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CaseSwitchLabel</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="43776">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,ParseText</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpCompilation,Create</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Accept</token>
</entry>
<entry count="295">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="20">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="14">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker,VisitTrivia</token>
</entry>
<entry count="13059">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitInterfaceDeclaration</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="19">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="51072">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InitializerExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="19395">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="108533">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BreakStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="436">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SwitchSection</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultSwitchLabel</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonList</token>
</entry>
<entry count="18">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="2917">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="42">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="648">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParenthesizedLambdaExpression</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="27">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="7078">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="4004">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Attribute</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="216">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="159">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
<entry count="10">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,PredefinedType</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="28">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="76416">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,NamespaceDeclaration</token>
</entry>
<entry count="736">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,CSharpKind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="13059">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingDirective</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="13824">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThrowStatement</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorInitializer</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
</entry>
<entry count="60">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="8291">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitEnumDeclaration</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IndexerDeclaration</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="592">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxExtensions,ToSyntaxTriviaList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseStatement</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ThisExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalExpression</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="780">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="15">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,QualifiedName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="34">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="72">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAnyUnaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsBinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsAssignmentExpressionOperatorToken</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConstructorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MethodDeclaration</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,DefaultExpression</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="16464">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,FieldDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
</entry>
<entry count="774">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TriviaList</token>
</entry>
<entry count="768">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseLeadingTrivia</token>
</entry>
<entry count="32832">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MissingToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree,GetRoot</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ElseClause</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="1">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,TryGetSpeculativeSemanticModel</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="336">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="19">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AssignmentExpression</token>
</entry>
<entry count="22">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="7104">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,CastExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="26">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsInNamespaceOrTypeContext</token>
</entry>
<entry count="12">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseToken</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="2352">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclarator</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFacts,IsPreprocessorKeyword</token>
</entry>
<entry count="13056">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LocalDeclarationStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="192">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,List</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="144">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="55296">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExplicitInterfaceSpecifier</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="576">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,IsVerbatimStringLiteral</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,AccessorList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
</entry>
<entry count="960">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLastToken</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,Kind</token>
</entry>
<entry count="24">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,Kind</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
</entry>
<entry count="608">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSpeculativeSymbolInfo</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
</entry>
<entry count="76416">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="8">
<token>Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,WithPreprocessorSymbols</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpParseOptions,WithLanguageVersion</token>
</entry>
<entry count="345">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Parameter</token>
</entry>
<entry count="582">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitMethodDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetDeclaredSymbol</token>
</entry>
<entry count="11">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,Visit</token>
</entry>
<entry count="6144">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ForStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
</entry>
<entry count="288">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ArgumentList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetTrailingTrivia</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SingletonSeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,UsingStatement</token>
</entry>
<entry count="384">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IfStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
</entry>
<entry count="48">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Literal</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Argument</token>
</entry>
<entry count="96">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,ToString</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLocation</token>
</entry>
<entry count="9">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseName</token>
</entry>
<entry count="3">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberBindingExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ConditionalAccessExpression</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,InvocationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode,GetLeadingTrivia</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
</entry>
<entry count="2592">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ExpressionStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ReturnStatement</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParameterList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Block</token>
</entry>
<entry count="2">
<token>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor,VisitObjectCreationExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
</entry>
<entry count="19621">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetSymbolInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
</entry>
<entry count="4">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Token</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,TokenList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,EqualsValueClause</token>
</entry>
<entry count="6">
<token>Microsoft.CodeAnalysis.CSharp.CSharpExtensions,GetTypeInfo</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,IdentifierName</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,MemberAccessExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,LiteralExpression</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,BinaryExpression</token>
</entry>
<entry count="12672">
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,SeparatedList</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,VariableDeclaration</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,Identifier</token>
<token>Microsoft.CodeAnalysis.CSharp.SyntaxFactory,ParseTypeName</token>
</entry>
</dictionary>
