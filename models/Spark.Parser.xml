<?xml version="1.0" encoding="UTF-8"?><dictionary case_sensitive="false">
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="4">
<token>Spark.Parser.Position,Advance</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
</entry>
<entry count="8">
<token>Spark.Parser.ParseAction`1[[TValue</token>
<token>-&gt;</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
</entry>
<entry count="30">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
</entry>
<entry count="4">
<token>Spark.Parser.Position,Advance</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
<token>-&gt;</token>
<token>p:string]],Invoke</token>
</entry>
<entry count="4">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="12">
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep1</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
</entry>
<entry count="12">
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="4">
<token>Spark.Parser.Position,new</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
<token>-&gt;</token>
<token>p:string]],Invoke</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="4">
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
<token>-&gt;</token>
<token>p:string]],Invoke</token>
</entry>
<entry count="4">
<token>Spark.Parser.Position,new</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep1</token>
</entry>
<entry count="30">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="4">
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
<token>-&gt;</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep1</token>
</entry>
<entry count="8">
<token>Spark.Parser.ParseAction`1[[TValue</token>
<token>-&gt;</token>
<token>p:string]],Invoke</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
</entry>
<entry count="4">
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="18">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="12">
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="18">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="12">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Build</token>
</entry>
<entry count="12">
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="12">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
</entry>
<entry count="4">
<token>Spark.Parser.Position,Advance</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
<token>-&gt;</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="8">
<token>-&gt;</token>
<token>p:string]],Invoke</token>
</entry>
<entry count="4">
<token>Spark.Parser.Position,new</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
<token>-&gt;</token>
</entry>
<entry count="4">
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,Or</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="12">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="4">
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
<token>Spark.Parser.Position,Advance</token>
<token>Spark.Parser.ParseAction`1[[TValue</token>
<token>-&gt;</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep1</token>
<token>Spark.Parser.CharGrammar,Ch</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
</entry>
<entry count="30">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="12">
<token>Spark.Parser.ParseActionExtensions,And</token>
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.CharGrammar,ChNot</token>
<token>Spark.Parser.Grammar,Rep</token>
<token>Spark.Parser.ParseActionExtensions,And</token>
</entry>
<entry count="6">
<token>Spark.Parser.CharGrammar,Ch</token>
<token>Spark.Parser.Grammar,Rep</token>
</entry>
<entry count="6">
<token>Spark.Parser.ParseActionExtensions,Build</token>
<token>Spark.Parser.Position,PotentialLength</token>
</entry>
</dictionary>
